/*
AIOZ-AI-PLATFORM API

API for AIOZ AI Platform

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aiozaiplatformgosdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ApiKeyRepositoryAPIService ApiKeyRepositoryAPI service
type ApiKeyRepositoryAPIService service

type ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest struct {
	ctx context.Context
	ApiService *ApiKeyRepositoryAPIService
	ownerUsername string
	repositoryName string
	sha *string
	xApiKey *string
	page *int32
	pageSize *int32
	path *string
	repoType *string
}

// Sha is the sha of the commit (optional)
func (r ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest) Sha(sha string) ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest {
	r.sha = &sha
	return r
}

// api-key
func (r ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest) XApiKey(xApiKey string) ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest {
	r.xApiKey = &xApiKey
	return r
}

// Page is the page number (default: 1) (optional)
func (r ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest) Page(page int32) ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest {
	r.page = &page
	return r
}

// PageSize is the page size (default: 10) (optional)
func (r ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest) PageSize(pageSize int32) ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest {
	r.pageSize = &pageSize
	return r
}

// Path is the path of the file (optional)
func (r ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest) Path(path string) ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest {
	r.path = &path
	return r
}

func (r ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest) RepoType(repoType string) ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest {
	r.repoType = &repoType
	return r
}

func (r ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest) Execute() (*ResponseGetCommitHistoryResponse, *http.Response, error) {
	return r.ApiService.ApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetExecute(r)
}

/*
ApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGet Get commit history by repository name and branch name by api key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ownerUsername repository's owner
 @param repositoryName repository's name
 @return ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest
*/
func (a *ApiKeyRepositoryAPIService) ApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGet(ctx context.Context, ownerUsername string, repositoryName string) ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest {
	return ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
		ownerUsername: ownerUsername,
		repositoryName: repositoryName,
	}
}

// Execute executes the request
//  @return ResponseGetCommitHistoryResponse
func (a *ApiKeyRepositoryAPIService) ApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetExecute(r ApiApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGetRequest) (*ResponseGetCommitHistoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseGetCommitHistoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiKeyRepositoryAPIService.ApiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api-key/repository/{ownerUsername}/{repositoryName}/commit/history"
	localVarPath = strings.Replace(localVarPath, "{"+"ownerUsername"+"}", url.PathEscape(parameterValueToString(r.ownerUsername, "ownerUsername")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repositoryName"+"}", url.PathEscape(parameterValueToString(r.repositoryName, "repositoryName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sha == nil {
		return localVarReturnValue, nil, reportError("sha is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "", "")
	} else {
		var defaultValue int32 = 10
		r.pageSize = &defaultValue
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "", "")
	}
	if r.repoType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repoType", r.repoType, "", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "sha", r.sha, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-key", r.xApiKey, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResponseFailResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResponseErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
