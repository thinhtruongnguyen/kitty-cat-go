/*
AIOZ-AI-PLATFORM API

API for AIOZ AI Platform

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package myclient

import (
	"encoding/json"
)

// checks if the ModelsCommitUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCommitUser{}

// ModelsCommitUser struct for ModelsCommitUser
type ModelsCommitUser struct {
	Date *string `json:"date,omitempty"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewModelsCommitUser instantiates a new ModelsCommitUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCommitUser() *ModelsCommitUser {
	this := ModelsCommitUser{}
	return &this
}

// NewModelsCommitUserWithDefaults instantiates a new ModelsCommitUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCommitUserWithDefaults() *ModelsCommitUser {
	this := ModelsCommitUser{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ModelsCommitUser) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommitUser) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ModelsCommitUser) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ModelsCommitUser) SetDate(v string) {
	o.Date = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ModelsCommitUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommitUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ModelsCommitUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ModelsCommitUser) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelsCommitUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommitUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelsCommitUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelsCommitUser) SetName(v string) {
	o.Name = &v
}

func (o ModelsCommitUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCommitUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableModelsCommitUser struct {
	value *ModelsCommitUser
	isSet bool
}

func (v NullableModelsCommitUser) Get() *ModelsCommitUser {
	return v.value
}

func (v *NullableModelsCommitUser) Set(val *ModelsCommitUser) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCommitUser) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCommitUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCommitUser(val *ModelsCommitUser) *NullableModelsCommitUser {
	return &NullableModelsCommitUser{value: val, isSet: true}
}

func (v NullableModelsCommitUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCommitUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


