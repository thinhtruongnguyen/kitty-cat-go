/*
AIOZ-AI-PLATFORM API

API for AIOZ AI Platform

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package myclient

import (
	"encoding/json"
)

// checks if the ModelsCommit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCommit{}

// ModelsCommit struct for ModelsCommit
type ModelsCommit struct {
	Author *ModelsUser `json:"author,omitempty"`
	CommitAffectedFiles []string `json:"commit_affected_files,omitempty"`
	CommitData *ModelsUser `json:"commit_data,omitempty"`
	CommitMeta *ModelsCommitMeta `json:"commit_meta,omitempty"`
	Parents []ModelsCommitMeta `json:"parents,omitempty"`
	RepoCommit *ModelsRepoCommit `json:"repo_commit,omitempty"`
	Stats *ModelsCommitStats `json:"stats,omitempty"`
}

// NewModelsCommit instantiates a new ModelsCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCommit() *ModelsCommit {
	this := ModelsCommit{}
	return &this
}

// NewModelsCommitWithDefaults instantiates a new ModelsCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCommitWithDefaults() *ModelsCommit {
	this := ModelsCommit{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ModelsCommit) GetAuthor() ModelsUser {
	if o == nil || IsNil(o.Author) {
		var ret ModelsUser
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommit) GetAuthorOk() (*ModelsUser, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ModelsCommit) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given ModelsUser and assigns it to the Author field.
func (o *ModelsCommit) SetAuthor(v ModelsUser) {
	o.Author = &v
}

// GetCommitAffectedFiles returns the CommitAffectedFiles field value if set, zero value otherwise.
func (o *ModelsCommit) GetCommitAffectedFiles() []string {
	if o == nil || IsNil(o.CommitAffectedFiles) {
		var ret []string
		return ret
	}
	return o.CommitAffectedFiles
}

// GetCommitAffectedFilesOk returns a tuple with the CommitAffectedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommit) GetCommitAffectedFilesOk() ([]string, bool) {
	if o == nil || IsNil(o.CommitAffectedFiles) {
		return nil, false
	}
	return o.CommitAffectedFiles, true
}

// HasCommitAffectedFiles returns a boolean if a field has been set.
func (o *ModelsCommit) HasCommitAffectedFiles() bool {
	if o != nil && !IsNil(o.CommitAffectedFiles) {
		return true
	}

	return false
}

// SetCommitAffectedFiles gets a reference to the given []string and assigns it to the CommitAffectedFiles field.
func (o *ModelsCommit) SetCommitAffectedFiles(v []string) {
	o.CommitAffectedFiles = v
}

// GetCommitData returns the CommitData field value if set, zero value otherwise.
func (o *ModelsCommit) GetCommitData() ModelsUser {
	if o == nil || IsNil(o.CommitData) {
		var ret ModelsUser
		return ret
	}
	return *o.CommitData
}

// GetCommitDataOk returns a tuple with the CommitData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommit) GetCommitDataOk() (*ModelsUser, bool) {
	if o == nil || IsNil(o.CommitData) {
		return nil, false
	}
	return o.CommitData, true
}

// HasCommitData returns a boolean if a field has been set.
func (o *ModelsCommit) HasCommitData() bool {
	if o != nil && !IsNil(o.CommitData) {
		return true
	}

	return false
}

// SetCommitData gets a reference to the given ModelsUser and assigns it to the CommitData field.
func (o *ModelsCommit) SetCommitData(v ModelsUser) {
	o.CommitData = &v
}

// GetCommitMeta returns the CommitMeta field value if set, zero value otherwise.
func (o *ModelsCommit) GetCommitMeta() ModelsCommitMeta {
	if o == nil || IsNil(o.CommitMeta) {
		var ret ModelsCommitMeta
		return ret
	}
	return *o.CommitMeta
}

// GetCommitMetaOk returns a tuple with the CommitMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommit) GetCommitMetaOk() (*ModelsCommitMeta, bool) {
	if o == nil || IsNil(o.CommitMeta) {
		return nil, false
	}
	return o.CommitMeta, true
}

// HasCommitMeta returns a boolean if a field has been set.
func (o *ModelsCommit) HasCommitMeta() bool {
	if o != nil && !IsNil(o.CommitMeta) {
		return true
	}

	return false
}

// SetCommitMeta gets a reference to the given ModelsCommitMeta and assigns it to the CommitMeta field.
func (o *ModelsCommit) SetCommitMeta(v ModelsCommitMeta) {
	o.CommitMeta = &v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *ModelsCommit) GetParents() []ModelsCommitMeta {
	if o == nil || IsNil(o.Parents) {
		var ret []ModelsCommitMeta
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommit) GetParentsOk() ([]ModelsCommitMeta, bool) {
	if o == nil || IsNil(o.Parents) {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *ModelsCommit) HasParents() bool {
	if o != nil && !IsNil(o.Parents) {
		return true
	}

	return false
}

// SetParents gets a reference to the given []ModelsCommitMeta and assigns it to the Parents field.
func (o *ModelsCommit) SetParents(v []ModelsCommitMeta) {
	o.Parents = v
}

// GetRepoCommit returns the RepoCommit field value if set, zero value otherwise.
func (o *ModelsCommit) GetRepoCommit() ModelsRepoCommit {
	if o == nil || IsNil(o.RepoCommit) {
		var ret ModelsRepoCommit
		return ret
	}
	return *o.RepoCommit
}

// GetRepoCommitOk returns a tuple with the RepoCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommit) GetRepoCommitOk() (*ModelsRepoCommit, bool) {
	if o == nil || IsNil(o.RepoCommit) {
		return nil, false
	}
	return o.RepoCommit, true
}

// HasRepoCommit returns a boolean if a field has been set.
func (o *ModelsCommit) HasRepoCommit() bool {
	if o != nil && !IsNil(o.RepoCommit) {
		return true
	}

	return false
}

// SetRepoCommit gets a reference to the given ModelsRepoCommit and assigns it to the RepoCommit field.
func (o *ModelsCommit) SetRepoCommit(v ModelsRepoCommit) {
	o.RepoCommit = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *ModelsCommit) GetStats() ModelsCommitStats {
	if o == nil || IsNil(o.Stats) {
		var ret ModelsCommitStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommit) GetStatsOk() (*ModelsCommitStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ModelsCommit) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given ModelsCommitStats and assigns it to the Stats field.
func (o *ModelsCommit) SetStats(v ModelsCommitStats) {
	o.Stats = &v
}

func (o ModelsCommit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCommit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.CommitAffectedFiles) {
		toSerialize["commit_affected_files"] = o.CommitAffectedFiles
	}
	if !IsNil(o.CommitData) {
		toSerialize["commit_data"] = o.CommitData
	}
	if !IsNil(o.CommitMeta) {
		toSerialize["commit_meta"] = o.CommitMeta
	}
	if !IsNil(o.Parents) {
		toSerialize["parents"] = o.Parents
	}
	if !IsNil(o.RepoCommit) {
		toSerialize["repo_commit"] = o.RepoCommit
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	return toSerialize, nil
}

type NullableModelsCommit struct {
	value *ModelsCommit
	isSet bool
}

func (v NullableModelsCommit) Get() *ModelsCommit {
	return v.value
}

func (v *NullableModelsCommit) Set(val *ModelsCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCommit(val *ModelsCommit) *NullableModelsCommit {
	return &NullableModelsCommit{value: val, isSet: true}
}

func (v NullableModelsCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


