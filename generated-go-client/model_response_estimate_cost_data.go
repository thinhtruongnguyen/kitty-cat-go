/*
AIOZ-AI-PLATFORM API

API for AIOZ AI Platform

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package myclient

import (
	"encoding/json"
)

// checks if the ResponseEstimateCostData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseEstimateCostData{}

// ResponseEstimateCostData struct for ResponseEstimateCostData
type ResponseEstimateCostData struct {
	Cost *float32 `json:"cost,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Unit *string `json:"unit,omitempty"`
}

// NewResponseEstimateCostData instantiates a new ResponseEstimateCostData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseEstimateCostData() *ResponseEstimateCostData {
	this := ResponseEstimateCostData{}
	var symbol string = "$"
	this.Symbol = &symbol
	var unit string = "USD"
	this.Unit = &unit
	return &this
}

// NewResponseEstimateCostDataWithDefaults instantiates a new ResponseEstimateCostData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseEstimateCostDataWithDefaults() *ResponseEstimateCostData {
	this := ResponseEstimateCostData{}
	var symbol string = "$"
	this.Symbol = &symbol
	var unit string = "USD"
	this.Unit = &unit
	return &this
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *ResponseEstimateCostData) GetCost() float32 {
	if o == nil || IsNil(o.Cost) {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseEstimateCostData) GetCostOk() (*float32, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *ResponseEstimateCostData) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *ResponseEstimateCostData) SetCost(v float32) {
	o.Cost = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *ResponseEstimateCostData) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseEstimateCostData) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *ResponseEstimateCostData) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *ResponseEstimateCostData) SetSymbol(v string) {
	o.Symbol = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *ResponseEstimateCostData) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseEstimateCostData) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *ResponseEstimateCostData) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *ResponseEstimateCostData) SetUnit(v string) {
	o.Unit = &v
}

func (o ResponseEstimateCostData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseEstimateCostData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableResponseEstimateCostData struct {
	value *ResponseEstimateCostData
	isSet bool
}

func (v NullableResponseEstimateCostData) Get() *ResponseEstimateCostData {
	return v.value
}

func (v *NullableResponseEstimateCostData) Set(val *ResponseEstimateCostData) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseEstimateCostData) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseEstimateCostData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseEstimateCostData(val *ResponseEstimateCostData) *NullableResponseEstimateCostData {
	return &NullableResponseEstimateCostData{value: val, isSet: true}
}

func (v NullableResponseEstimateCostData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseEstimateCostData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


