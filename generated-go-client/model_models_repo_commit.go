/*
AIOZ-AI-PLATFORM API

API for AIOZ AI Platform

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package myclient

import (
	"encoding/json"
)

// checks if the ModelsRepoCommit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsRepoCommit{}

// ModelsRepoCommit struct for ModelsRepoCommit
type ModelsRepoCommit struct {
	Author *ModelsCommitUser `json:"author,omitempty"`
	Committer *ModelsCommitUser `json:"committer,omitempty"`
	Message *string `json:"message,omitempty"`
	Tree *ModelsCommitMeta `json:"tree,omitempty"`
}

// NewModelsRepoCommit instantiates a new ModelsRepoCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsRepoCommit() *ModelsRepoCommit {
	this := ModelsRepoCommit{}
	return &this
}

// NewModelsRepoCommitWithDefaults instantiates a new ModelsRepoCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsRepoCommitWithDefaults() *ModelsRepoCommit {
	this := ModelsRepoCommit{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ModelsRepoCommit) GetAuthor() ModelsCommitUser {
	if o == nil || IsNil(o.Author) {
		var ret ModelsCommitUser
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRepoCommit) GetAuthorOk() (*ModelsCommitUser, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ModelsRepoCommit) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given ModelsCommitUser and assigns it to the Author field.
func (o *ModelsRepoCommit) SetAuthor(v ModelsCommitUser) {
	o.Author = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *ModelsRepoCommit) GetCommitter() ModelsCommitUser {
	if o == nil || IsNil(o.Committer) {
		var ret ModelsCommitUser
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRepoCommit) GetCommitterOk() (*ModelsCommitUser, bool) {
	if o == nil || IsNil(o.Committer) {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *ModelsRepoCommit) HasCommitter() bool {
	if o != nil && !IsNil(o.Committer) {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given ModelsCommitUser and assigns it to the Committer field.
func (o *ModelsRepoCommit) SetCommitter(v ModelsCommitUser) {
	o.Committer = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ModelsRepoCommit) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRepoCommit) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ModelsRepoCommit) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ModelsRepoCommit) SetMessage(v string) {
	o.Message = &v
}

// GetTree returns the Tree field value if set, zero value otherwise.
func (o *ModelsRepoCommit) GetTree() ModelsCommitMeta {
	if o == nil || IsNil(o.Tree) {
		var ret ModelsCommitMeta
		return ret
	}
	return *o.Tree
}

// GetTreeOk returns a tuple with the Tree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRepoCommit) GetTreeOk() (*ModelsCommitMeta, bool) {
	if o == nil || IsNil(o.Tree) {
		return nil, false
	}
	return o.Tree, true
}

// HasTree returns a boolean if a field has been set.
func (o *ModelsRepoCommit) HasTree() bool {
	if o != nil && !IsNil(o.Tree) {
		return true
	}

	return false
}

// SetTree gets a reference to the given ModelsCommitMeta and assigns it to the Tree field.
func (o *ModelsRepoCommit) SetTree(v ModelsCommitMeta) {
	o.Tree = &v
}

func (o ModelsRepoCommit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsRepoCommit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Committer) {
		toSerialize["committer"] = o.Committer
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Tree) {
		toSerialize["tree"] = o.Tree
	}
	return toSerialize, nil
}

type NullableModelsRepoCommit struct {
	value *ModelsRepoCommit
	isSet bool
}

func (v NullableModelsRepoCommit) Get() *ModelsRepoCommit {
	return v.value
}

func (v *NullableModelsRepoCommit) Set(val *ModelsRepoCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsRepoCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsRepoCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsRepoCommit(val *ModelsRepoCommit) *NullableModelsRepoCommit {
	return &NullableModelsRepoCommit{value: val, isSet: true}
}

func (v NullableModelsRepoCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsRepoCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


